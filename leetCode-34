import java.util.List;

/*
 * @lc app=leetcode.cn id=34 lang=java
 *
 * [34] 在排序数组中查找元素的第一个和最后一个位置
 */

// @lc code=start
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left=0;
        int right = nums.length-1;
        int [] result = new int [2];
        while(left<=right){
            int medium = (left+right)/2;
            if(nums[medium]==target){
                right = medium+1;
                left = medium-1;

                while(left>=0 || right<=nums.length-1){
                    if(left<0){
                        left =0;
                    }
                    if(right>nums.length-1){
                        right = nums.length-1;
                    }
                    if(nums[left]<nums[medium] && nums[right]>nums[medium]){
                        result[0] = left+1;
                        result[1] = right-1;
                        return result;
                    }else if(left==0 && nums[right]>nums[medium]){
                        result[0] = 0;
                        result[1] = right-1;
                        return result;
                    }else if (nums[left]<nums[medium] && right==nums.length-1){
                        result[0] = left+1;
                        result[1] = nums.length-1;
                        return  result;
                    }else if(left==0 && right==nums.length-1){
                        result[0] = 0;
                        result[1] = nums.length-1;
                        return  result;
                    }else if (nums[left]<nums[medium]&& nums[right]==nums[medium]){
                        right ++;
                    }else if(nums[left]==nums[medium]&& nums[right]>nums[medium]){
                        left--;
                    }else{
                        right++;
                        left--;
                    }
                }
                result[0] = medium;
                result[1] = medium;
                return result;
            }else if (nums[medium]>target){
                right = medium - 1;
            }else{
                left = medium + 1;
            }
        }
        result[0] = -1;
        result[1] = -1;
        return result;
    }
}
// @lc code=end
二分法查找法

