/*
 * @lc app=leetcode.cn id=40 lang=java
 *
 * [40] 组合总和 II
 */

// @lc code=start
class Solution {
    public static List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Set<List<Integer>> result = new HashSet<List<Integer>>();
        List<Integer> oneResult = new LinkedList<Integer>();
        Arrays.sort(candidates);
        dfs(result,oneResult,candidates,target);
        return new ArrayList<>(result);
    }
    public static void dfs(Set<List<Integer>> result,List<Integer>oneResult,int[]candidates,int target){
        if(target==0){
            result.add(new LinkedList<>(oneResult));
            return;
        }
        for(int i = 0;i<candidates.length;i++){
            if(target-candidates[i]<0){
                break;
            }
            oneResult.add(candidates[i]);
            int [] newCandidates = new int[candidates.length-i-1];

            for(int j = 0;j<newCandidates.length;j++){
                if(j+i+1==candidates.length){
                    newCandidates[0] = candidates[candidates.length-1];
                    break;
                }
                newCandidates[j] = candidates[i+j+1];
            }
            dfs(result, oneResult, newCandidates, target-candidates[i]);
            oneResult.remove(oneResult.size()-1);
        }

    }
}
// @lc code=end
和39类似；回溯+剪枝最后这个去重没做好
