/*
 * @lc app=leetcode.cn id=39 lang=java
 *
 * [39] 组合总和
 */

// @lc code=start
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> oneResult = new LinkedList<Integer>();
        int len = candidates.length;
        Arrays.sort(candidates);
        dfs(candidates, target, 0, oneResult, result);
        return result;
    }
    public void dfs(int[] candidates,int target,int begin,List<Integer> oneResult,List<List<Integer>> result){
        if(target==0){
            result.add(new LinkedList<>(oneResult));
            return;
        }
        for(int i = begin;i<candidates.length;i++){
            if(target-candidates[i]<0){
                break;
            }
            oneResult.add(candidates[i]);
            dfs(candidates, target-candidates[i], i, oneResult, result);
            oneResult.remove(oneResult.size()-1);
        }
    }
    
}
// @lc code=end

回溯 加剪枝
